/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsestatePropsAsStateImport } from './routes/usestate/props-as-state'
import { Route as UsestateFunctionalUpdaterImport } from './routes/usestate/functional-updater'
import { Route as UsecontextProviderHellImport } from './routes/usecontext/provider-hell'
import { Route as UsecontextFailLoudlyImport } from './routes/usecontext/fail-loudly'
import { Route as ThirdpartyZustandImport } from './routes/thirdparty/zustand'
import { Route as ThirdpartyXstateImport } from './routes/thirdparty/xstate'
import { Route as ThirdpartyTanstackQueryTwoImport } from './routes/thirdparty/tanstack-query-two'
import { Route as ThirdpartyTanstackQueryImport } from './routes/thirdparty/tanstack-query'
import { Route as ThirdpartyReactHookFormImport } from './routes/thirdparty/react-hook-form'
import { Route as ThirdpartyJotaiImport } from './routes/thirdparty/jotai'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsestatePropsAsStateRoute = UsestatePropsAsStateImport.update({
  id: '/usestate/props-as-state',
  path: '/usestate/props-as-state',
  getParentRoute: () => rootRoute,
} as any)

const UsestateFunctionalUpdaterRoute = UsestateFunctionalUpdaterImport.update({
  id: '/usestate/functional-updater',
  path: '/usestate/functional-updater',
  getParentRoute: () => rootRoute,
} as any)

const UsecontextProviderHellRoute = UsecontextProviderHellImport.update({
  id: '/usecontext/provider-hell',
  path: '/usecontext/provider-hell',
  getParentRoute: () => rootRoute,
} as any)

const UsecontextFailLoudlyRoute = UsecontextFailLoudlyImport.update({
  id: '/usecontext/fail-loudly',
  path: '/usecontext/fail-loudly',
  getParentRoute: () => rootRoute,
} as any)

const ThirdpartyZustandRoute = ThirdpartyZustandImport.update({
  id: '/thirdparty/zustand',
  path: '/thirdparty/zustand',
  getParentRoute: () => rootRoute,
} as any)

const ThirdpartyXstateRoute = ThirdpartyXstateImport.update({
  id: '/thirdparty/xstate',
  path: '/thirdparty/xstate',
  getParentRoute: () => rootRoute,
} as any)

const ThirdpartyTanstackQueryTwoRoute = ThirdpartyTanstackQueryTwoImport.update(
  {
    id: '/thirdparty/tanstack-query-two',
    path: '/thirdparty/tanstack-query-two',
    getParentRoute: () => rootRoute,
  } as any,
)

const ThirdpartyTanstackQueryRoute = ThirdpartyTanstackQueryImport.update({
  id: '/thirdparty/tanstack-query',
  path: '/thirdparty/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const ThirdpartyReactHookFormRoute = ThirdpartyReactHookFormImport.update({
  id: '/thirdparty/react-hook-form',
  path: '/thirdparty/react-hook-form',
  getParentRoute: () => rootRoute,
} as any)

const ThirdpartyJotaiRoute = ThirdpartyJotaiImport.update({
  id: '/thirdparty/jotai',
  path: '/thirdparty/jotai',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/thirdparty/jotai': {
      id: '/thirdparty/jotai'
      path: '/thirdparty/jotai'
      fullPath: '/thirdparty/jotai'
      preLoaderRoute: typeof ThirdpartyJotaiImport
      parentRoute: typeof rootRoute
    }
    '/thirdparty/react-hook-form': {
      id: '/thirdparty/react-hook-form'
      path: '/thirdparty/react-hook-form'
      fullPath: '/thirdparty/react-hook-form'
      preLoaderRoute: typeof ThirdpartyReactHookFormImport
      parentRoute: typeof rootRoute
    }
    '/thirdparty/tanstack-query': {
      id: '/thirdparty/tanstack-query'
      path: '/thirdparty/tanstack-query'
      fullPath: '/thirdparty/tanstack-query'
      preLoaderRoute: typeof ThirdpartyTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/thirdparty/tanstack-query-two': {
      id: '/thirdparty/tanstack-query-two'
      path: '/thirdparty/tanstack-query-two'
      fullPath: '/thirdparty/tanstack-query-two'
      preLoaderRoute: typeof ThirdpartyTanstackQueryTwoImport
      parentRoute: typeof rootRoute
    }
    '/thirdparty/xstate': {
      id: '/thirdparty/xstate'
      path: '/thirdparty/xstate'
      fullPath: '/thirdparty/xstate'
      preLoaderRoute: typeof ThirdpartyXstateImport
      parentRoute: typeof rootRoute
    }
    '/thirdparty/zustand': {
      id: '/thirdparty/zustand'
      path: '/thirdparty/zustand'
      fullPath: '/thirdparty/zustand'
      preLoaderRoute: typeof ThirdpartyZustandImport
      parentRoute: typeof rootRoute
    }
    '/usecontext/fail-loudly': {
      id: '/usecontext/fail-loudly'
      path: '/usecontext/fail-loudly'
      fullPath: '/usecontext/fail-loudly'
      preLoaderRoute: typeof UsecontextFailLoudlyImport
      parentRoute: typeof rootRoute
    }
    '/usecontext/provider-hell': {
      id: '/usecontext/provider-hell'
      path: '/usecontext/provider-hell'
      fullPath: '/usecontext/provider-hell'
      preLoaderRoute: typeof UsecontextProviderHellImport
      parentRoute: typeof rootRoute
    }
    '/usestate/functional-updater': {
      id: '/usestate/functional-updater'
      path: '/usestate/functional-updater'
      fullPath: '/usestate/functional-updater'
      preLoaderRoute: typeof UsestateFunctionalUpdaterImport
      parentRoute: typeof rootRoute
    }
    '/usestate/props-as-state': {
      id: '/usestate/props-as-state'
      path: '/usestate/props-as-state'
      fullPath: '/usestate/props-as-state'
      preLoaderRoute: typeof UsestatePropsAsStateImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/thirdparty/jotai': typeof ThirdpartyJotaiRoute
  '/thirdparty/react-hook-form': typeof ThirdpartyReactHookFormRoute
  '/thirdparty/tanstack-query': typeof ThirdpartyTanstackQueryRoute
  '/thirdparty/tanstack-query-two': typeof ThirdpartyTanstackQueryTwoRoute
  '/thirdparty/xstate': typeof ThirdpartyXstateRoute
  '/thirdparty/zustand': typeof ThirdpartyZustandRoute
  '/usecontext/fail-loudly': typeof UsecontextFailLoudlyRoute
  '/usecontext/provider-hell': typeof UsecontextProviderHellRoute
  '/usestate/functional-updater': typeof UsestateFunctionalUpdaterRoute
  '/usestate/props-as-state': typeof UsestatePropsAsStateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/thirdparty/jotai': typeof ThirdpartyJotaiRoute
  '/thirdparty/react-hook-form': typeof ThirdpartyReactHookFormRoute
  '/thirdparty/tanstack-query': typeof ThirdpartyTanstackQueryRoute
  '/thirdparty/tanstack-query-two': typeof ThirdpartyTanstackQueryTwoRoute
  '/thirdparty/xstate': typeof ThirdpartyXstateRoute
  '/thirdparty/zustand': typeof ThirdpartyZustandRoute
  '/usecontext/fail-loudly': typeof UsecontextFailLoudlyRoute
  '/usecontext/provider-hell': typeof UsecontextProviderHellRoute
  '/usestate/functional-updater': typeof UsestateFunctionalUpdaterRoute
  '/usestate/props-as-state': typeof UsestatePropsAsStateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/thirdparty/jotai': typeof ThirdpartyJotaiRoute
  '/thirdparty/react-hook-form': typeof ThirdpartyReactHookFormRoute
  '/thirdparty/tanstack-query': typeof ThirdpartyTanstackQueryRoute
  '/thirdparty/tanstack-query-two': typeof ThirdpartyTanstackQueryTwoRoute
  '/thirdparty/xstate': typeof ThirdpartyXstateRoute
  '/thirdparty/zustand': typeof ThirdpartyZustandRoute
  '/usecontext/fail-loudly': typeof UsecontextFailLoudlyRoute
  '/usecontext/provider-hell': typeof UsecontextProviderHellRoute
  '/usestate/functional-updater': typeof UsestateFunctionalUpdaterRoute
  '/usestate/props-as-state': typeof UsestatePropsAsStateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/thirdparty/jotai'
    | '/thirdparty/react-hook-form'
    | '/thirdparty/tanstack-query'
    | '/thirdparty/tanstack-query-two'
    | '/thirdparty/xstate'
    | '/thirdparty/zustand'
    | '/usecontext/fail-loudly'
    | '/usecontext/provider-hell'
    | '/usestate/functional-updater'
    | '/usestate/props-as-state'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/thirdparty/jotai'
    | '/thirdparty/react-hook-form'
    | '/thirdparty/tanstack-query'
    | '/thirdparty/tanstack-query-two'
    | '/thirdparty/xstate'
    | '/thirdparty/zustand'
    | '/usecontext/fail-loudly'
    | '/usecontext/provider-hell'
    | '/usestate/functional-updater'
    | '/usestate/props-as-state'
  id:
    | '__root__'
    | '/'
    | '/thirdparty/jotai'
    | '/thirdparty/react-hook-form'
    | '/thirdparty/tanstack-query'
    | '/thirdparty/tanstack-query-two'
    | '/thirdparty/xstate'
    | '/thirdparty/zustand'
    | '/usecontext/fail-loudly'
    | '/usecontext/provider-hell'
    | '/usestate/functional-updater'
    | '/usestate/props-as-state'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ThirdpartyJotaiRoute: typeof ThirdpartyJotaiRoute
  ThirdpartyReactHookFormRoute: typeof ThirdpartyReactHookFormRoute
  ThirdpartyTanstackQueryRoute: typeof ThirdpartyTanstackQueryRoute
  ThirdpartyTanstackQueryTwoRoute: typeof ThirdpartyTanstackQueryTwoRoute
  ThirdpartyXstateRoute: typeof ThirdpartyXstateRoute
  ThirdpartyZustandRoute: typeof ThirdpartyZustandRoute
  UsecontextFailLoudlyRoute: typeof UsecontextFailLoudlyRoute
  UsecontextProviderHellRoute: typeof UsecontextProviderHellRoute
  UsestateFunctionalUpdaterRoute: typeof UsestateFunctionalUpdaterRoute
  UsestatePropsAsStateRoute: typeof UsestatePropsAsStateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ThirdpartyJotaiRoute: ThirdpartyJotaiRoute,
  ThirdpartyReactHookFormRoute: ThirdpartyReactHookFormRoute,
  ThirdpartyTanstackQueryRoute: ThirdpartyTanstackQueryRoute,
  ThirdpartyTanstackQueryTwoRoute: ThirdpartyTanstackQueryTwoRoute,
  ThirdpartyXstateRoute: ThirdpartyXstateRoute,
  ThirdpartyZustandRoute: ThirdpartyZustandRoute,
  UsecontextFailLoudlyRoute: UsecontextFailLoudlyRoute,
  UsecontextProviderHellRoute: UsecontextProviderHellRoute,
  UsestateFunctionalUpdaterRoute: UsestateFunctionalUpdaterRoute,
  UsestatePropsAsStateRoute: UsestatePropsAsStateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/thirdparty/jotai",
        "/thirdparty/react-hook-form",
        "/thirdparty/tanstack-query",
        "/thirdparty/tanstack-query-two",
        "/thirdparty/xstate",
        "/thirdparty/zustand",
        "/usecontext/fail-loudly",
        "/usecontext/provider-hell",
        "/usestate/functional-updater",
        "/usestate/props-as-state"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/thirdparty/jotai": {
      "filePath": "thirdparty/jotai.tsx"
    },
    "/thirdparty/react-hook-form": {
      "filePath": "thirdparty/react-hook-form.tsx"
    },
    "/thirdparty/tanstack-query": {
      "filePath": "thirdparty/tanstack-query.tsx"
    },
    "/thirdparty/tanstack-query-two": {
      "filePath": "thirdparty/tanstack-query-two.tsx"
    },
    "/thirdparty/xstate": {
      "filePath": "thirdparty/xstate.tsx"
    },
    "/thirdparty/zustand": {
      "filePath": "thirdparty/zustand.tsx"
    },
    "/usecontext/fail-loudly": {
      "filePath": "usecontext/fail-loudly.tsx"
    },
    "/usecontext/provider-hell": {
      "filePath": "usecontext/provider-hell.tsx"
    },
    "/usestate/functional-updater": {
      "filePath": "usestate/functional-updater.tsx"
    },
    "/usestate/props-as-state": {
      "filePath": "usestate/props-as-state.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
